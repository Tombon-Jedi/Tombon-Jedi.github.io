<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>利用github.io搭建自有博客 next v6 v8</title>
    <url>/posts/5f64cd17/</url>
    <content><![CDATA[<p>利用github.io搭建自有博客，基于hexo博客框架和next主题。<br>搭建这个blog框架吧，一是觉得csdn不好用，反正有一段时间特别卡，编辑界面出不来；二是觉得托管到上边没有github那种掌控感，反正csdn没有提供导出文章为md的功能，还得自己用工具把html转换为md，而且广告贼多，就感觉自己被白嫖了。索性研究一下搭建自己的blog。<span id="more"></span></p>
<h2 id="环境准备，本地以windows为例"><a href="#环境准备，本地以windows为例" class="headerlink" title="环境准备，本地以windows为例"></a>环境准备，本地以windows为例</h2><p>我一开始找到的是v6的仓库，结果遇到很多bug手动改源码处理，，最后才发现新版啥都解决了，还有更多集成的功能……<br>建议先读这个<a href="https://hexo-next.readthedocs.io/zh-cn/latest/">教程</a><br>除了hexo、next的相关，尤其可以了解到next混乱的版本地址……</p>
<table>
<thead>
<tr>
<th align="left">Years</th>
<th align="center">Version</th>
<th align="center">Version</th>
</tr>
</thead>
<tbody><tr>
<td align="left">2014 ~ 2017</td>
<td align="center">v5</td>
<td align="center"><a href="https://github.com/iissnan/">https://github.com/iissnan/</a></td>
</tr>
<tr>
<td align="left">2018 ~ 2019</td>
<td align="center">v6 ~ v7</td>
<td align="center"><a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a></td>
</tr>
<tr>
<td align="left">2020~</td>
<td align="center">v8</td>
<td align="center"><a href="https://github.com/next-theme/hexo-theme-next">https://github.com/next-theme/hexo-theme-next</a></td>
</tr>
</tbody></table>
<h3 id="代码托管，创建-github-io-仓库"><a href="#代码托管，创建-github-io-仓库" class="headerlink" title="代码托管，创建&lt;username&gt;.github.io 仓库"></a>代码托管，创建&lt;username&gt;.github.io 仓库</h3><p>创建的仓库，用来托管blog代码，github提供了github.io相关工具，最后代码同步完访问<a href="http://yourname.github.io/">http://yourname.github.io</a><br>就可以看到自己的网页了。以下是我自己的仓库设置，供参考：<br><img src="/../images/hexo_next_setting/github_setting.png" alt="github设置" title="github_setting"></p>
<h3 id="本地部署-Hexo-环境"><a href="#本地部署-Hexo-环境" class="headerlink" title="本地部署 Hexo 环境"></a>本地部署 Hexo 环境</h3><p>Hexo 是一款基于 Node.js 效的静态博客框架</p>
<ul>
<li><p>安装Node.js，<a href="https://nodejs.org/en/download/prebuilt-installer/current">官网下载</a>，安装最新版本即可  </p>
</li>
<li><p>安装 Hexo： npm install -g hexo-cli</p>
</li>
<li><p>安装 swig：npm i hexo-renderer-swig</p>
</li>
<li><p>windows设置里 搜索 允许本地PowerShell脚本未签名的情况下运行 开启</p>
<ul>
<li>不开启powershell运行hexo server会报错</li>
</ul>
</li>
<li><p>初始化 Hexo 框架：hexo init hexo_blog</p>
</li>
<li><p>进入上条命令所创建的 hexo_blog 文件夹中：cd hexo_blog</p>
</li>
<li><p>启动 Hexo 服务：hexo server  </p>
</li>
<li><p>访问默认界面，测试是否安装成功：浏览器访问localhost:4000<br> 注意，以后本地都可以运行hexo服务后本地查看网页效果，觉得满意了在部署发布到github不迟。</p>
</li>
<li><p>添加一篇文章&#x2F;博客</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&#x27;First Post&#x27;</span></span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: ~/blogs/source/_posts/First-Post.md</span><br></pre></td></tr></table></figure>
<p>  生成后的文件通过模板添加了页面标题、时间以及标签。可以自己修改scaffolds下的post.md模板。<br>  注意，手动麻烦，自己整格式，添加时间啥的。直接hexo new比较快捷。</p>
</li>
</ul>
<h3 id="配置hexo和next主题"><a href="#配置hexo和next主题" class="headerlink" title="配置hexo和next主题"></a>配置hexo和next主题</h3><p>进入创建的 hexo_blog 文件夹中，将 Next 主题相关文件从 github 克隆到 themes 文件夹中 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next.git themes/next_v8  <span class="comment">#这个是v8的地址</span></span><br><span class="line"><span class="comment">#git clone https://github.com/theme-next/hexo-theme-next.git themes/next_v6  #这个是v6的地址，不用使用</span></span><br><span class="line"><span class="comment">#v8修复了很多v6.0的bug，后续小结属于v6的bug我会注明，v8是没有这些bug的。</span></span><br><span class="line"><span class="comment">#你要是想没事儿好奇看看这些bug，那就自己装v6的试试……</span></span><br></pre></td></tr></table></figure>

<p>配置 Hexo 的主题参数（在根目录的 _config.yml 文件中），选择使用 Next 主题</p>
<p>修改参数为：theme: next_v8</p>
<p>next主题有很多配置，比如首页的文章折叠，这里自行看next<a href="https://theme-next.iissnan.com/">官网教程</a> 配置。   </p>
<ul>
<li>配置文件<br>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的站点配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/hexo_blog/_config.yml</span><br><span class="line"></span><br><span class="line">/hexo_blog/themes/next/_config.yml</span><br></pre></td></tr></table></figure></li>
</ul>
<p>下面说几个遇到的bug，都是next_v6的</p>
<h4 id="menu配置bug-v6的bug"><a href="#menu配置bug-v6的bug" class="headerlink" title="menu配置bug v6的bug"></a>menu配置bug v6的bug</h4><p><img src="/../images/hexo_next_setting/menu_bug.png" alt="munu bug" title="menu bug"><br>如上图，原配置的||前边有空格，已经被我删除，如果不删除，页面上点击这些按钮，跳转会失败，报错类似：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cannot GET /%20</span><br></pre></td></tr></table></figure>
<p>%20其实就是空格的意思</p>
<h4 id="cannot-get-archives-7C-7C-20archive-v6的bug"><a href="#cannot-get-archives-7C-7C-20archive-v6的bug" class="headerlink" title="cannot get archives%7C%7C%20archive v6的bug"></a>cannot get archives%7C%7C%20archive v6的bug</h4><p>修改themes\next\layout_macro\sidebar.swig 第52行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;&#123;&#123; url_for(theme.menu.archives).split(&#x27;||&#x27;)[0] | trim &#125;&#125;&quot;</span>&gt;  改为下面一行</span><br><span class="line">&lt;a href=<span class="string">&quot;&#123;&#123; url_for(theme.menu.archives.split(&#x27;||&#x27;)[0]) | trim &#125;&#125;&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>原因在于urlfor 解析的网址还没split呢，应该是（）不小心括错了。</p>
<h4 id="next-中文标题无法跳转-v6的bug"><a href="#next-中文标题无法跳转-v6的bug" class="headerlink" title="next 中文标题无法跳转 v6的bug"></a>next 中文标题无法跳转 v6的bug</h4><p>我这里是超链接乱码问题，我们打开控制台，查看目录的的超链接标签，会看到 href 是一串乱码，实际上是被URL编码：<br><img src="/../images/hexo_next_setting/link_messy1.png" alt="url messy1" title="url_messy1"><br>修改themes\next\source\js\src\utils.js 233行下 如图：<br><img src="/../images/hexo_next_setting/link_messy2.png" alt="url messy2" title="url_messy2"><br>escapeSelector函数的目的是将选择器字符串中的某些特殊字符进行转义，以确保它们在JavaScript中可以安全使用。这个函数使用了正则表达式来匹配需要转义的字符，并使用replace方法将它们替换为转义后的版本。</p>
<p>然而，原先函数并没有考虑到中文字符，因为中文字符在CSS选择器中通常不需要转义。但是，如果中文字符在URL中被编码（例如，使用百分号编码），那么在解析这些字符之前需要进行解码。<br>所以解决这个问题，可以在escapeSelector函数中添加对中文字符的解码，然后再进行转义。</p>
<p>本地hexo可以跳转了，上传到github.io 还是无法跳转？<br>浏览器可能缓存了旧版本的JavaScript文件。尝试清除浏览器缓存或使用无痕模式访问GitHub Pages 网站。</p>
<h3 id="启用local-search"><a href="#启用local-search" class="headerlink" title="启用local_search"></a>启用local_search</h3><p>安装插件hexo-generator-searchdb,执行以下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>编辑 主题配置文件，启用本地搜索功能：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line">local_search:</span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="永久文章链接设置"><a href="#永久文章链接设置" class="headerlink" title="永久文章链接设置"></a>永久文章链接设置</h3><p>原始的文章链接是以日期来做的，那么不同日期修改了文章，链接就变了，如果其他文章引用了该文章，就会失效，为了防止这种问题产生，利用hexo-abbrlink生成永久链接，其实现方式：</p>
<blockquote>
<p>对标题+时间进行md5然后再转base64，保存在front-matter中。</p>
</blockquote>
<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>
<p>修改站点配置文件_config.yml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">permalink: posts/:abbrlink.html</span><br></pre></td></tr></table></figure>
<p>可以修改生成的算法和表示方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">算法：crc16(默认)或crc32</span><br><span class="line">表示：dec(默认，十进制)或hex(十六进制)</span><br></pre></td></tr></table></figure>
<p>配置方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># abbrlink config</span></span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  <span class="comment">#support crc16(default) and crc32</span></span><br><span class="line">  rep: hex    <span class="comment">#support dec(default) and hex</span></span><br></pre></td></tr></table></figure>
<p>hexo 编译后，比如hexo server启动时，会给源文件的配置快插入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">abbrlink: xxxxx</span><br></pre></td></tr></table></figure>
<p>文章链接就会永久以此为基础。</p>
<h2 id="Deploy-github"><a href="#Deploy-github" class="headerlink" title="Deploy github"></a>Deploy github</h2><p>将生成的静态页面部署到 github 上<br>修改站点配置文件_config.yml的最后部分</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>要先安装deploy-git，才能用命令部署到GitHub,否则报错ERROR Deployer not found: git</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>然后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="comment">#清除之前生成的东西</span></span><br><span class="line">hexo generate  <span class="comment">#生成静态文章，缩写hexo g</span></span><br><span class="line">hexo deploy  <span class="comment">#部署文章，缩写hexo d</span></span><br></pre></td></tr></table></figure>
<p>过一会儿就可以在 <a href="http://yourname.github.io/">http://yourname.github.io</a> 这个网站看到你的博客了！</p>
<h2 id="一键bat脚本"><a href="#一键bat脚本" class="headerlink" title="一键bat脚本"></a>一键bat脚本</h2><h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">cd</span> C:\Users\xxxx\Desktop\hexo_blog</span><br><span class="line">hexo generate --watch&amp;&amp;hexo s</span><br></pre></td></tr></table></figure>
<p>在服务器启动期间，Hexo 会监视文件变动并自动更新，无须重启服务器。<br>因为我的脚本文件就在c盘中，所以不需要切换盘符。bat规则可以查资料了解。</p>
<h3 id="一键发布博客"><a href="#一键发布博客" class="headerlink" title="一键发布博客"></a>一键发布博客</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">cd</span> C:\Users\xxxx\Desktop\hexo_blog</span><br><span class="line">hexo deploy --generate&amp;&amp;pause</span><br></pre></td></tr></table></figure>


<p>参考：<br>比较全的教程：<a href="https://hexo-next.readthedocs.io/zh-cn/latest/">https://hexo-next.readthedocs.io/zh-cn/latest/</a><br>hexo官方文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a><br>next教程：<a href="https://theme-next.iissnan.com/">https://theme-next.iissnan.com/</a><br>markdown教程：<a href="https://markdown.com.cn/basic-syntax/">https://markdown.com.cn/basic-syntax/</a><br>搭建blog教程：<a href="https://mini-pi.github.io/2024/02/28/how-to-make-blog-wedsite/">https://mini-pi.github.io/2024/02/28/how-to-make-blog-wedsite/</a><br>Hexo-Next 主题博客个性化配置：<a href="https://blog.csdn.net/as480133937/article/details/100138838">https://blog.csdn.net/as480133937/article/details/100138838</a></p>
]]></content>
  </entry>
</search>
