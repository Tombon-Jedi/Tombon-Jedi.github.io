<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<span id="more"></span></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>利用github.io搭建自有博客 next v6 v8</title>
    <url>/posts/5f64cd17/</url>
    <content><![CDATA[<p>利用github.io搭建自有博客，基于hexo博客框架和next主题。<br>搭建这个blog框架吧，一是觉得csdn不好用，反正有一段时间特别卡，编辑界面出不来；二是觉得托管到上边没有github那种掌控感，反正csdn没有提供导出文章为md的功能，还得自己用工具把html转换为md，而且广告贼多，就感觉自己被白嫖了。索性研究一下搭建自己的blog。<span id="more"></span></p>
<h2 id="环境准备，本地以windows为例"><a href="#环境准备，本地以windows为例" class="headerlink" title="环境准备，本地以windows为例"></a>环境准备，本地以windows为例</h2><p>我一开始找到的是v6的仓库，结果遇到很多bug手动改源码处理，，最后才发现新版啥都解决了，还有更多集成的功能……<br>建议先读这个<a href="https://hexo-next.readthedocs.io/zh-cn/latest/">教程</a><br>除了hexo、next的相关，尤其可以了解到next混乱的版本地址……</p>
<table>
<thead>
<tr>
<th align="left">Years</th>
<th align="center">Version</th>
<th align="center">Repository</th>
</tr>
</thead>
<tbody><tr>
<td align="left">2014 ~ 2017</td>
<td align="center">v5</td>
<td align="center"><a href="https://github.com/iissnan/">https://github.com/iissnan/</a></td>
</tr>
<tr>
<td align="left">2018 ~ 2019</td>
<td align="center">v6 ~ v7</td>
<td align="center"><a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a></td>
</tr>
<tr>
<td align="left">2020~</td>
<td align="center">v8</td>
<td align="center"><a href="https://github.com/next-theme/hexo-theme-next">https://github.com/next-theme/hexo-theme-next</a></td>
</tr>
</tbody></table>
<h3 id="代码托管，创建-github-io-仓库"><a href="#代码托管，创建-github-io-仓库" class="headerlink" title="代码托管，创建&lt;username&gt;.github.io 仓库"></a>代码托管，创建&lt;username&gt;.github.io 仓库</h3><p>创建的仓库，用来托管blog代码，github提供了github.io相关工具，最后代码同步完访问<a href="http://yourname.github.io/">http://yourname.github.io</a><br>就可以看到自己的网页了。以下是我自己的仓库设置，供参考：<br><img src="/../images/hexo_next_setting/github_setting.png" alt="github设置" title="github_setting"></p>
<h3 id="本地部署-Hexo-环境"><a href="#本地部署-Hexo-环境" class="headerlink" title="本地部署 Hexo 环境"></a>本地部署 Hexo 环境</h3><p>Hexo 是一款基于 Node.js 效的静态博客框架</p>
<ul>
<li><p>安装Node.js，<a href="https://nodejs.org/en/download/prebuilt-installer/current">官网下载</a>，安装最新版本即可  </p>
</li>
<li><p>安装 Hexo： npm install -g hexo-cli</p>
</li>
<li><p>安装 swig：npm i hexo-renderer-swig</p>
</li>
<li><p>windows设置里 搜索 允许本地PowerShell脚本未签名的情况下运行 开启</p>
<ul>
<li>不开启powershell运行hexo server会报错</li>
</ul>
</li>
<li><p>初始化 Hexo 框架：hexo init hexo_blog</p>
</li>
<li><p>进入上条命令所创建的 hexo_blog 文件夹中：cd hexo_blog</p>
</li>
<li><p>启动 Hexo 服务：hexo server  </p>
</li>
<li><p>访问默认界面，测试是否安装成功：浏览器访问localhost:4000<br> 注意，以后本地都可以运行hexo服务后本地查看网页效果，觉得满意了在部署发布到github不迟。</p>
</li>
<li><p>添加一篇文章&#x2F;博客</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&#x27;First Post&#x27;</span></span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: ~/blogs/source/_posts/First-Post.md</span><br></pre></td></tr></table></figure>
<p>  生成后的文件通过模板添加了页面标题、时间以及标签。可以自己修改scaffolds下的post.md模板。<br>  注意，手动麻烦，自己整格式，添加时间啥的。直接hexo new比较快捷。</p>
</li>
</ul>
<h3 id="配置hexo和next主题"><a href="#配置hexo和next主题" class="headerlink" title="配置hexo和next主题"></a>配置hexo和next主题</h3><p>进入创建的 hexo_blog 文件夹中，将 Next 主题相关文件从 github 克隆到 themes 文件夹中 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next.git themes/next_v8  <span class="comment">#这个是v8的地址</span></span><br><span class="line"><span class="comment">#git clone https://github.com/theme-next/hexo-theme-next.git themes/next_v6  #这个是v6的地址，不用使用</span></span><br><span class="line"><span class="comment">#v8修复了很多v6.0的bug，后续小结属于v6的bug我会注明，v8是没有这些bug的。</span></span><br><span class="line"><span class="comment">#你要是想没事儿好奇看看这些bug，那就自己装v6的试试……</span></span><br></pre></td></tr></table></figure>

<p>配置 Hexo 的主题参数（在根目录的 _config.yml 文件中），选择使用 Next 主题</p>
<p>修改参数为：theme: next_v8</p>
<p>next主题有很多配置，比如首页的文章折叠，这里自行看next_v8<a href="https://theme-next.js.org/mist/docs/getting-started/">官网教程</a> 配置。   </p>
<ul>
<li>配置文件<br>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的站点配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/hexo_blog/_config.yml</span><br><span class="line"></span><br><span class="line">/hexo_blog/themes/next/_config.yml</span><br></pre></td></tr></table></figure></li>
</ul>
<p>下面说几个遇到的bug，都是next_v6的</p>
<h4 id="menu配置bug-v6的bug"><a href="#menu配置bug-v6的bug" class="headerlink" title="menu配置bug v6的bug"></a>menu配置bug v6的bug</h4><p><img src="/../images/hexo_next_setting/menu_bug.png" alt="munu bug" title="menu bug"><br>如上图，原配置的||前边有空格，已经被我删除，如果不删除，页面上点击这些按钮，跳转会失败，报错类似：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cannot GET /%20</span><br></pre></td></tr></table></figure>
<p>%20其实就是空格的意思</p>
<h4 id="cannot-get-archives-7C-7C-20archive-v6的bug"><a href="#cannot-get-archives-7C-7C-20archive-v6的bug" class="headerlink" title="cannot get archives%7C%7C%20archive v6的bug"></a>cannot get archives%7C%7C%20archive v6的bug</h4><p>修改themes\next\layout_macro\sidebar.swig 第52行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;&#123;&#123; url_for(theme.menu.archives).split(&#x27;||&#x27;)[0] | trim &#125;&#125;&quot;</span>&gt;  改为下面一行</span><br><span class="line">&lt;a href=<span class="string">&quot;&#123;&#123; url_for(theme.menu.archives.split(&#x27;||&#x27;)[0]) | trim &#125;&#125;&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>原因在于urlfor 解析的网址还没split呢，应该是（）不小心括错了。</p>
<h4 id="next-中文标题无法跳转-v6的bug"><a href="#next-中文标题无法跳转-v6的bug" class="headerlink" title="next 中文标题无法跳转 v6的bug"></a>next 中文标题无法跳转 v6的bug</h4><p>我这里是超链接乱码问题，我们打开控制台，查看目录的的超链接标签，会看到 href 是一串乱码，实际上是被URL编码：<br><img src="/../images/hexo_next_setting/link_messy1.png" alt="url messy1" title="url_messy1"><br>修改themes\next\source\js\src\utils.js 233行下 如图：<br><img src="/../images/hexo_next_setting/link_messy2.png" alt="url messy2" title="url_messy2"><br>escapeSelector函数的目的是将选择器字符串中的某些特殊字符进行转义，以确保它们在JavaScript中可以安全使用。这个函数使用了正则表达式来匹配需要转义的字符，并使用replace方法将它们替换为转义后的版本。</p>
<p>然而，原先函数并没有考虑到中文字符，因为中文字符在CSS选择器中通常不需要转义。但是，如果中文字符在URL中被编码（例如，使用百分号编码），那么在解析这些字符之前需要进行解码。<br>所以解决这个问题，可以在escapeSelector函数中添加对中文字符的解码，然后再进行转义。</p>
<p>本地hexo可以跳转了，上传到github.io 还是无法跳转？<br>浏览器可能缓存了旧版本的JavaScript文件。尝试清除浏览器缓存或使用无痕模式访问GitHub Pages 网站。</p>
<h3 id="启用local-search"><a href="#启用local-search" class="headerlink" title="启用local_search"></a>启用local_search</h3><p>安装插件hexo-generator-searchdb,执行以下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>编辑 主题配置文件，启用本地搜索功能：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line">local_search:</span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="永久文章链接设置"><a href="#永久文章链接设置" class="headerlink" title="永久文章链接设置"></a>永久文章链接设置</h3><p>原始的文章链接是以日期来做的，那么不同日期修改了文章，链接就变了，如果其他文章引用了该文章，就会失效，为了防止这种问题产生，利用hexo-abbrlink生成永久链接，其实现方式：</p>
<blockquote>
<p>对标题+时间进行md5然后再转base64，保存在front-matter中。</p>
</blockquote>
<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>
<p>修改站点配置文件_config.yml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">permalink: posts/:abbrlink.html</span><br></pre></td></tr></table></figure>
<p>可以修改生成的算法和表示方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">算法：crc16(默认)或crc32</span><br><span class="line">表示：dec(默认，十进制)或hex(十六进制)</span><br></pre></td></tr></table></figure>
<p>配置方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># abbrlink config</span></span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  <span class="comment">#support crc16(default) and crc32</span></span><br><span class="line">  rep: hex    <span class="comment">#support dec(default) and hex</span></span><br></pre></td></tr></table></figure>
<p>hexo 编译后，比如hexo server启动时，会给源文件的配置快插入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">abbrlink: xxxxx</span><br></pre></td></tr></table></figure>
<p>文章链接就会永久以此为基础。</p>
<h3 id="浏览统计"><a href="#浏览统计" class="headerlink" title="浏览统计"></a>浏览统计</h3><p>busuanzi可以对博客访问量计数。<br>主题配置文件修改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>当enable: true时，代表开启全局开关。若site_uv、site_pv、page_pv的值均为false时，不蒜子仅作记录而不会在页面上显示。</p>
<h3 id="放大缩小文中图片"><a href="#放大缩小文中图片" class="headerlink" title="放大缩小文中图片"></a>放大缩小文中图片</h3><p>开启Fancybox，这是一款用于显示图片、视频等。触摸启用，响应快，完全可定制。<br>主题配置文件修改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fancybox: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>或者使用mediumzoom，更加简洁，两者不可同时使用。</p>
<h3 id="开启giscus评论功能"><a href="#开启giscus评论功能" class="headerlink" title="开启giscus评论功能"></a>开启giscus评论功能</h3><p>Giscus 允许你将 GitHub Discussions 集成到你的网站上作为评论系统。这样做的好处是评论数据存储在 GitHub 上，不需要第三方服务。</p>
<h4 id="仓库设置"><a href="#仓库设置" class="headerlink" title="仓库设置"></a>仓库设置</h4><p>新建一个仓库或者就在博客这个仓库设置以下属性：</p>
<ul>
<li>你的仓库必须是公开的 (public)，否则访客将无法查看 discussion<br>创建仓库时要保证是public</li>
<li>在你的仓库中启用 Discussions 功能<br>在仓库的Settings下，找到Discussions勾选</li>
<li>仓库安装giscus app<br>访问<a href="https://github.com/apps/giscus">https://github.com/apps/giscus</a> 安装，记得设置就你开启评论的那个仓库就可以了，别整全部仓库了。</li>
</ul>
<h4 id="本地giscus安装和本地配置"><a href="#本地giscus安装和本地配置" class="headerlink" title="本地giscus安装和本地配置"></a>本地giscus安装和本地配置</h4><ul>
<li>在你的 Hexo 博客目录中执行以下命令，安装 hexo-next-giscus 插件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-next-giscus --save</span><br></pre></td></tr></table></figure></li>
<li>giscus配置<br>访问：<a href="https://giscus.app/zh-CN">https://giscus.app/zh-CN</a><br>在配置章节进行配置<br><img src="/../images/hexo_next_setting/giscus1.png" alt="giscus配置" title="giscus配置"><br>如上图所示，最后会生成一个配置脚本，如下图<br><img src="/../images/hexo_next_setting/giscus2.png" alt="giscus配置生成" title="giscus配置生成"><br>配置脚本就是这一段 &lt;script … &gt; … </script><br>你可以按照它的说法，直接复制粘贴这段代码到想出现的位置。<br>不过hexo或者next支持了giscus，所以可以在站点配置或者主题配置中加入以下内容，根据生成的配置代码填写对应项即可：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">giscus:</span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">repo: <span class="comment"># Github repository name</span></span><br><span class="line">repo_id: <span class="comment"># Github repository id</span></span><br><span class="line">category: <span class="comment"># Github discussion category</span></span><br><span class="line">category_id: <span class="comment"># Github discussion category id</span></span><br><span class="line"><span class="comment"># Available values: pathname | url | title | og:title</span></span><br><span class="line">mapping: pathname</span><br><span class="line"><span class="comment"># Available values: 0 | 1</span></span><br><span class="line">reactions_enabled: 1</span><br><span class="line"> <span class="comment"># Available values: 0 | 1</span></span><br><span class="line">emit_metadata: 1</span><br><span class="line"><span class="comment"># Available values: light | dark | dark_high_contrast | transparent_dark | preferred-color-scheme</span></span><br><span class="line">theme: light</span><br><span class="line"><span class="comment"># Available values: en | zh-CN</span></span><br><span class="line">lang: en</span><br><span class="line"><span class="comment"># Place the comment box above the comments</span></span><br><span class="line">input_position: bottom</span><br><span class="line"><span class="comment"># Load the comments lazily</span></span><br><span class="line">loading: lazy</span><br></pre></td></tr></table></figure>

最后启动服务，在文章末尾可以看到giscus评论区。</li>
</ul>
<h3 id="一些有趣配置"><a href="#一些有趣配置" class="headerlink" title="一些有趣配置"></a>一些有趣配置</h3><p>参考：<a href="http://home.ustc.edu.cn/~liujunyan/blog/hexo-next-theme-config/#next-%E9%85%8D%E7%BD%AE">http://home.ustc.edu.cn/~liujunyan/blog/hexo-next-theme-config/#next-%E9%85%8D%E7%BD%AE</a><br>文末添加诗词、背景动画、盘古动画等</p>
<h2 id="Deploy-github"><a href="#Deploy-github" class="headerlink" title="Deploy github"></a>Deploy github</h2><p>将生成的静态页面部署到 github 上<br>修改站点配置文件_config.yml的最后部分</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>要先安装deploy-git，才能用命令部署到GitHub,否则报错ERROR Deployer not found: git</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>然后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="comment">#清除之前生成的东西</span></span><br><span class="line">hexo generate  <span class="comment">#生成静态文章，缩写hexo g</span></span><br><span class="line">hexo deploy  <span class="comment">#部署文章，缩写hexo d</span></span><br></pre></td></tr></table></figure>
<p>过一会儿就可以在 <a href="http://yourname.github.io/">http://yourname.github.io</a> 这个网站看到你的博客了！</p>
<h2 id="一键bat脚本"><a href="#一键bat脚本" class="headerlink" title="一键bat脚本"></a>一键bat脚本</h2><h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">cd</span> C:\Users\xxxx\Desktop\hexo_blog</span><br><span class="line">hexo generate --watch&amp;&amp;hexo s</span><br></pre></td></tr></table></figure>
<p>在服务器启动期间，Hexo 会监视文件变动并自动更新，无须重启服务器。<br>因为我的脚本文件就在c盘中，所以不需要切换盘符。bat规则可以查资料了解。</p>
<h3 id="一键发布博客"><a href="#一键发布博客" class="headerlink" title="一键发布博客"></a>一键发布博客</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">cd</span> C:\Users\xxxx\Desktop\hexo_blog</span><br><span class="line">hexo deploy --generate&amp;&amp;pause</span><br></pre></td></tr></table></figure>


<p>参考：<br>比较全的教程：<a href="https://hexo-next.readthedocs.io/zh-cn/latest/">https://hexo-next.readthedocs.io/zh-cn/latest/</a><br>hexo官方文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a><br>nextv8教程：<a href="https://theme-next.js.org/mist/docs/getting-started/">https://theme-next.js.org/mist/docs/getting-started/</a><br>nextv5教程：<a href="https://theme-next.iissnan.com/">https://theme-next.iissnan.com/</a>  可以做参考<br>markdown教程：<a href="https://markdown.com.cn/basic-syntax/">https://markdown.com.cn/basic-syntax/</a><br>搭建blog教程：<a href="https://mini-pi.github.io/2024/02/28/how-to-make-blog-wedsite/">https://mini-pi.github.io/2024/02/28/how-to-make-blog-wedsite/</a><br>Hexo-Next 主题博客个性化配置：<a href="https://blog.csdn.net/as480133937/article/details/100138838">https://blog.csdn.net/as480133937/article/details/100138838</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>cmake 配置 cuda支持</title>
    <url>/posts/5cf09be9/</url>
    <content><![CDATA[<p>对于c&#x2F;c++而言，编译cuda可以使用nvcc工具直接命令行进行编译，不过对于大型工程，还是需要利用cmake进行管理，下面介绍一下cmake如何配置cuda。<span id="more"></span></p>
<h2 id="老版本方式-find-package"><a href="#老版本方式-find-package" class="headerlink" title="老版本方式 find_package"></a>老版本方式 find_package</h2><p>如果CMake的版本小于3.10，可以在CMakeLists.txt文件中使用find_package来导入CUDA包，然后就可以使用cuda_add_executable()或者cuda_add_library()来编译CUDA可执行文件或者库文件了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.8)</span><br><span class="line">project(CUDA_TEST)</span><br><span class="line"></span><br><span class="line">find_package(CUDA REQUIRED)</span><br><span class="line"></span><br><span class="line">message(STATUS <span class="string">&quot;cuda version: &quot;</span> <span class="variable">$&#123;CUDA_VERSION_STRING&#125;</span>)</span><br><span class="line">include_directories(<span class="variable">$&#123;CUDA_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line">cuda_add_executable(cuda_test cuda_test.cu)</span><br><span class="line">target_link_libraries(cuda_test <span class="variable">$&#123;CUDA_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure>
<p>其中变量CUDA_VERSION_STRING表示CUDA的版本号，CUDA_INCLUDE_DIRS表示CUDA头文件存放的目录，CUDA_LIBRARIES表示CUDA的库文件。更多说明可以参考CMake的<a href="https://cmake.org/cmake/help/latest/module/FindCUDA.html">官方文档</a></p>
<h2 id="新的方式-添加cuda编程语言支持"><a href="#新的方式-添加cuda编程语言支持" class="headerlink" title="新的方式 添加cuda编程语言支持"></a>新的方式 添加cuda编程语言支持</h2><p>在3.10及以上版本的CMake中，find_package的方式已经被弃用（可以用但不推荐），要编译CUDA代码可以CMakeLists.txt文件中添加对CUDA编程语言的支持。如果程序中CUDA代码是可选的，那么可以在CMakeLists.txt文件中使用下面的语句进行使能：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">enable_language(CUDA)</span><br></pre></td></tr></table></figure>
<p>如果CUDA代码是必须的，那么就需要像下面这样进行设置，表示在项目CUDA_TEST中要用到CUDA和C++两种编程语言：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">project(CUDA_TEST LANGUAGES CUDA CXX)</span><br></pre></td></tr></table></figure>

<p>可以通过CheckLanuage判断CUDA是否可用，如果确定有环境可以不要</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include(CheckLanguage)</span><br><span class="line">check_language(CUDA)</span><br></pre></td></tr></table></figure>

<p>然后就可以跟编译普通C++代码一样用add_executable编译可执行文件了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.10)</span><br><span class="line">project(CUDA_TEST LANGUAGES CUDA CXX)</span><br><span class="line"></span><br><span class="line">include(CheckLanguage)</span><br><span class="line">check_language(CUDA)</span><br><span class="line"></span><br><span class="line">add_executable(cuda_test cuda_test.cu)</span><br></pre></td></tr></table></figure>

<p>参考：<br><a href="https://cliutils.gitlab.io/modern-cmake/chapters/packages/CUDA.html">https://cliutils.gitlab.io/modern-cmake/chapters/packages/CUDA.html</a></p>
]]></content>
      <categories>
        <category>部署</category>
      </categories>
      <tags>
        <tag>cuda</tag>
      </tags>
  </entry>
  <entry>
    <title>多维度数组寻址</title>
    <url>/posts/17977dc1/</url>
    <content><![CDATA[<p>在进行并行编程，如cuda编程，进行grid、block、thread等索引和实际的计算多维数组对应时，如模型输出后对内存上的输出排列按照特定的数组结构进行分解时，往往都会设计数组地址的计算。<br>在内存中，数据都是一维度线性存在的，但我们在写程序时，往往会按照二维、多维的逻辑进行计算，这就涉及到底层一点的代码，会有多维索引和实际内存地址的相互转换。<span id="more"></span></p>
<h2 id="一维数组内存地址转换"><a href="#一维数组内存地址转换" class="headerlink" title="一维数组内存地址转换"></a>一维数组内存地址转换</h2><p>这个没太多说的，和实际内存排列一致，也就是偏移是一致的，一般加个内存起始地址就对应上了。</p>
<h2 id="二维数组内存地址转换"><a href="#二维数组内存地址转换" class="headerlink" title="二维数组内存地址转换"></a>二维数组内存地址转换</h2><p>这里要说明一个约定俗成的说法：一般写法array[…][z][y][x]  即多维数组，从左往右，越右边的轴越内层，比如x在这里就是最内层的轴，即代表了该数组最小单元里有多少个元素。<br>对于二维数组array[y][x]  常见的x，y轴排列，可以想象成一页，一页有行和列。x和y没必要非得去对应行或者列，x对应行也好，对应列也好，只是一个叫法。所以为什么会有轴这个叫法，也是翻译过来的，x轴和y轴，代表了不同层级的元素数量。比如x轴这里是最内层的元素数量，y作为更高一层的，代表了有y个x轴。如果还有z轴，代表了有z个y轴的数量（y轴就像页了，有y个x轴组成），以此类推更多维度。<br>所以对于二维数组array[y][x]的内存如何计算？可以想象成一页，最内层的x在某一行的位置，那么前边所有行可以理解成是满的，那么当前数组索引对应的实际内存地址应该是前边所有行满的数量加上当前行的即x的值。<br>轴是从0开始计算的，所以y的值代表了实际前边已经满的行数量，x的值是最后行里的实际位置。也可以理解成偏移量。所以内存地址为y_value*dimx+x_value</p>
<h2 id="三维数组内存地址转换"><a href="#三维数组内存地址转换" class="headerlink" title="三维数组内存地址转换"></a>三维数组内存地址转换</h2><p>前边二维想象成页的话，三维可以想象成立方体了，其中的一页页（xy轴）堆叠起来，这个一页页的数量就代表了z轴的值。<br>所以，z本身的值就是前边所有满的页，在加上最后页的计算（同理二维时的计算），就是最终三维的计算了.所以三维度数组就是：z_value*dimx*dimy+y_value*dimx+x_value,</p>
<h2 id="多维数组内存地址转换"><a href="#多维数组内存地址转换" class="headerlink" title="多维数组内存地址转换"></a>多维数组内存地址转换</h2><p>有了前边二维到三维的层层递进，就不难理解更多的多维度了，反正就是从最外层往最内层一层层推即可。以最外层轴的数值乘以所有内层轴的维度数，层层计算最后累加即可。<br>有个注意的点儿就是，当轴为1时，其值就只能是0，那么，比如三维数组的z轴是1，那么根据公式：z_value*dimx*dimy+y_value<em>dimx+x_value, 其中z_value只能是0，所以就可以简化为：y_value</em>dimx+x_value，进一步的，对于轴为1的情况，在计算内存地址时是可以省略掉。</p>
]]></content>
  </entry>
  <entry>
    <title>cuda_learn_record</title>
    <url>/posts/6d64b5a8/</url>
    <content><![CDATA[<p>刷了一遍<a href="https://face2ai.com/categories/CUDA/">谭升的cuda教程</a>，这里记录一些自己的心得体会和关键点。<span id="more"></span></p>
<h2 id="理解cuda编程的核心概念"><a href="#理解cuda编程的核心概念" class="headerlink" title="理解cuda编程的核心概念"></a>理解cuda编程的核心概念</h2><p>学过计算机系统组成都知道，软件的效率，和你对硬件的了解，针对硬件的优化息息相关，比如cpu的分支预测、缓存命中，内存、硬盘的读写效率，如何去挖掘和适应硬件，决定了你程序性能。所以针对某个硬件的编程，自然，从硬件本身的结构、特点入手，了解清楚了在去想很多问题就很简单了，软件层面很多的写法、妥协，都是因为硬件工程师是这么设计硬件的……</p>
<h3 id="cpu和cuda的协作，cuda的硬件结构"><a href="#cpu和cuda的协作，cuda的硬件结构" class="headerlink" title="cpu和cuda的协作，cuda的硬件结构"></a>cpu和cuda的协作，cuda的硬件结构</h3><p><img src="/../../images/cuda/host_cuda.png" alt="cpu_cuda" title="cpu_cuda"><br>为什么需要cuda进行并行计算就不解释了，这张图能看出什么？</p>
<h4 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h4><p>host也就是cpu主机端，和cuda也就是device端，有数据传输的过程，这里一般通过pcie总线进行传输，既然是数据传输，那么就会有数据传输速度的上限，这里通常用带宽来表示，一般是xxGB&#x2F;s。</p>
<h4 id="线程的组织结构"><a href="#线程的组织结构" class="headerlink" title="线程的组织结构"></a>线程的组织结构</h4><p>一个核函数只能有一个grid，一个grid可以有很多个块，每个块可以有很多的线程<br>grid和block的维度最大是三维。注意线程块、网格都是逻辑上的产物，实际上硬件SM的排列大概率和内存差不多。都是一维的。[详见]：(<a href="https://face2ai.com/CUDA-F-2-0-CUDA%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E6%A6%82%E8%BF%B01/">https://face2ai.com/CUDA-F-2-0-CUDA%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E6%A6%82%E8%BF%B01/</a>)</p>
<p><img src="/../../images/cuda/wraps.png" alt="wraps" title="wraps"></p>
<h4 id="线程束"><a href="#线程束" class="headerlink" title="线程束"></a>线程束</h4><p>线程块是个逻辑产物，因为在计算机里，内存总是一维线性存在的，所以执行起来也是一维的访问线程块中的线程，但是我们在写程序的时候却可以以二维三维的方式进行，原因是方便我们写程序，比如处理图像或者三维的数据，三维块就会变得很直接，很方便。<br>在块中，每个线程有唯一的编号（可能是个三维的编号），threadIdx。<br>网格中，每个线程块也有唯一的编号(可能是个三维的编号)，blockIdx<br>那么每个线程就有在网格中的唯一编号。<br>当一个线程块中有128个线程的时候，其分配到SM上执行时，会分成4个块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">warp0: thread  0,........thread31</span><br><span class="line">warp1: thread 32,........thread63</span><br><span class="line">warp2: thread 64,........thread95</span><br><span class="line">warp3: thread 96,........thread127</span><br></pre></td></tr></table></figure>
<p><a href="https://face2ai.com/CUDA-F-3-2-%E7%90%86%E8%A7%A3%E7%BA%BF%E7%A8%8B%E6%9D%9F%E6%89%A7%E8%A1%8C%E7%9A%84%E6%9C%AC%E8%B4%A8-P1/">详见</a></p>
<h4 id="线程束分化"><a href="#线程束分化" class="headerlink" title="线程束分化"></a>线程束分化</h4><p>线程束被执行的时候会被分配给相同的指令，处理各自私有的数据，也就是说一个线程束当时执行的指令都是一样的，处理的数据可以不一样。但这种执行指令的方式，遇到有分支的情况，比如当前给线程束的指令是执行if下边的语句，这个线程束内还存在需要执行else部分的，那么else这些线程就只能阻塞，直到分配了执行else的指令。条件分支越多，并行性削弱越严重，这就是线程束执行指令特点导致的。<br><img src="/../../images/cuda/thread_wrap.png" alt="thread_wrap" title="thread_wrap"></p>
<h4 id="SM执行特点"><a href="#SM执行特点" class="headerlink" title="SM执行特点"></a>SM执行特点</h4><p>每个SM上有多个block，一个block有多个线程（可以是几百个，但不会超过某个最大值），但是从机器的角度，在某时刻T，SM上只执行一个线程束，也就是32个线程在同时同步执行。<br>因为SM有限，虽然我们的编程模型层面看所有线程都是并行执行的，但是在微观上看，所有线程块也是分批次的在物理层面的机器上执行，线程块里不同的线程可能进度都不一样，但是同一个线程束内的线程拥有相同的进度。<br>并行就会引起竞争，多线程以未定义的顺序访问同一个数据，就导致了不可预测的行为，CUDA只提供了一种块内同步的方式，块之间没办法同步！</p>
<p><img src="/../../images/cuda/cuda_memory.png" alt="cuda_memory" title="cuda_memory"><br>上边的图是</p>
<h4 id="cuda的内存组织方式"><a href="#cuda的内存组织方式" class="headerlink" title="cuda的内存组织方式"></a>cuda的内存组织方式</h4><p>CUDA中每个线程都有自己的私有的本地内存；线程块有自己的共享内存，对线程块内所有线程可见；所有线程都能访问读取常量内存和纹理内存，但是不能写，因为他们是只读的；全局内存，常量内存和纹理内存空间有不同的用途。对于一个应用来说，全局内存，常量内存和纹理内存有相同的生命周期 <a href="https://face2ai.com/CUDA-F-4-1-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E6%A6%82%E8%BF%B0/">详见</a></p>
<p><img src="/../../images/cuda/memory_access.png" alt="memory_access" title="memory_access"></p>
<h4 id="线程访问内存的方式"><a href="#线程访问内存的方式" class="headerlink" title="线程访问内存的方式"></a>线程访问内存的方式</h4><p>核函数运行时需要从全局内存（DRAM）中读取数据不是想取多少是多少，而是一次性读特定粒度大小到缓存，然后在从缓存加载特定的数据。这块缓存机制和cpu的差不多。解释下“粒度”，可以理解为最小单位，也就是核函数运行时每次读内存，哪怕是读一个字节的变量，也要读128字节，或者32字节，而具体是到底是32还是128还是要看访问方式：对于CPU来说，一级缓存或者二级缓存是不能被编程的，但是CUDA是支持通过编译指令停用一级缓存的。如果启用一级缓存，那么每次从DRAM上加载数据的粒度是128字节，如果不适用一级缓存，只是用二级缓存，那么粒度是32字节。</p>
<h4 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h4><p>共享内存（shared memory，SMEM）是GPU的一个关键部分，物理层面，每个SM都有一个小的内存池，这个线程池被次SM上执行的线程块中的所有线程所共享。共享内存使同一个线程块中可以相互协同，便于片上的内存可以被最大化的利用，降低回到全局内存读取的延迟。SM上有共享内存，L1一级缓存，ReadOnly 只读缓存，Constant常量缓存。所有从Dram全局内存中过来的数据都要经过二级缓存，相比之下，更接近SM计算核心的SMEM，L1，ReadOnly，Constant拥有更快的读取速度，SMEM和L1相比于L2延迟低大概20~30倍，带宽大约是10倍。每个SM上有若干KB的片上内存，共享内存和L1共享这若干KB</p>
<h5 id="内存存储体"><a href="#内存存储体" class="headerlink" title="内存存储体"></a>内存存储体</h5><p>共享内存是一个一维的地址空间，注意这句话的意思是，共享内存的地址是一维的，也就是和所有我们前面提到过的内存一样，都是线性的，二维三维更多维的地址都要转换成一维的来对应物理上的内存地址。<br>共享内存有个特殊的形式是，分为32个同样大小的内存模型，称为存储体，可以同时访问。32个存储体的目的是对应一个线程束中有32个线程，这些线程在访问共享内存的时候，如果都访问不同存储体（无冲突），那么一个事务就能够完成，否则（有冲突）需要多个内存事务了，这样带宽利用率降低。 一个存储体大小特定，访问存储体时一次访问多大看计算能力。<br>具体存储体冲突<a href="https://face2ai.com/CUDA-F-5-1-CUDA%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E6%A6%82%E8%BF%B0/">详见</a></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过以上的这些概念，很容易总结出cuda的性能容易在哪儿出问题，如何优化。</p>
<ul>
<li>优化block和grid的形状，使得线程利用硬件资源最大</li>
<li>由于线程束的执行特点，如何避免分支分化</li>
<li>不同线程束、不同block、甚至grid直接如何同步？数据传输如何同步？</li>
<li>可否使得单个线程尽可能完成更多的任务，减少资源占用，如循环展开</li>
<li>如何利用全局内存加快数据访问</li>
<li>如何保存内存高效率连续读写，而不是交叉访问，甚至于访问冲突？</li>
<li>优化cpu和gpu之间的数据传输，使其充分利用带宽</li>
</ul>
]]></content>
      <tags>
        <tag>cuda</tag>
      </tags>
  </entry>
  <entry>
    <title>cuda工具使用</title>
    <url>/posts/a9bc9cab/</url>
    <content><![CDATA[<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Warning: Skipping profiling on device 0 since profiling is not supported on devices with compute capability 7.5 and higher.<br>                  Use NVIDIA Nsight Compute for GPU profiling and NVIDIA Nsight Systems for GPU tracing and CPU sampling.<br>                  Refer <a href="https://developer.nvidia.com/tools-overview">https://developer.nvidia.com/tools-overview</a> for more details.</p>
]]></content>
  </entry>
</search>
